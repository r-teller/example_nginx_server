name: Docker-Image-Publish

on:
  push:
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: r-teller/echo
  DOCKER_IMAGE_NAME: rteller/echo
  RELEASE_VERSION: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            platform_safe: linux-amd64
          - platform: linux/arm64
            platform_safe: linux-arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1
        with:
          cosign-release: 'v2.1.1' # optional

      # Setup against a Docker registry
      # https://github.com/docker/build-push-action
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up QEMU
        if: matrix.platform == 'linux/arm64'
        uses: docker/setup-qemu-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Login against a Docker registry
      - name: Log in to GitHub Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
            ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=linux-${{ matrix.platform }}

      # Build image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./nginx_echo
          file: ./nginx_echo/Dockerfile
          load: true  
          tags: ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:test
          build-args: RELEASE_VERSION=${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform }}

      # Test container before pushing it
      # https://docs.docker.com/build/ci/github-actions/test-before-push/
      - name: Run the Docker Container
        if: matrix.platform == 'linux/amd64'
        run: |
          docker run --rm --name test-container -d ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:test

      - name: Execute Tests
        if: matrix.platform == 'linux/amd64'
        run: |
          docker exec test-container /usr/local/bin/run_nginx_tests.sh 

      - name: Push Docker Image
        id: push-image
        # if: success() # Only push if tests succeed
        if: matrix.platform == 'linux/amd64' && success() || matrix.platform == 'linux/arm64'
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./nginx_echo
          file: ./nginx_echo/Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${{ github.sha }}-${{ matrix.platform_safe }}
          build-args: RELEASE_VERSION=${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform }}

      - name: Cleanup
        if: matrix.platform == 'linux/amd64'
        run: docker stop test-container

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   # env:
      #     # DIGEST: ${{ steps.build-and-push.outputs.digest }}
      #     # TAGS: ${{ steps.docker_meta.outputs.tags }}
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.push-image.outputs.digest }}
      #   # run: cosign sign --yes "${TAGS}@${DIGEST}"
  create-manifest:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3.0.0

      # Login against a Docker registry
      - name: Log in to GitHub Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Create and push Docker manifest
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${{ github.ref_name }} \
            --tag ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${{ github.sha }}-linux-amd64 \
            ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${{ github.sha }}-linux-arm64